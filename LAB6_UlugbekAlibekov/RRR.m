clear L

deg = pi/180;

L1 = 1;
L2 = 1;
L3 = 1;

M1 = 0;
M2 = 10;
M3 = 10;

R = 0.05;

L(1) = Revolute('d', L1, 'a', 0, 'alpha', pi/2, ...
    'I', IntertiaMatrix(M1,L1,R), ...
    'r', [0, 0, 0], ...
    'm', M1, ...
    'Jm', 0.0001, ...
    'G', 500, ...
    'B', 0.0001, ...
    'Tc', 0.0001, ...
    'qlim', [-180 180]*deg );

L(2) = Revolute('d', 0, 'a', L2, 'alpha', 0, ...
    'I', IntertiaMatrix(M2,L2,R), ...
    'r', [0, 0.5, 0], ...
    'm', M2, ...
    'Jm', 0.0001, ...
    'G', 500, ...
    'B', 0.0001, ...
    'Tc', 0.0001, ...
    'qlim', [-90 90]*deg );

L(3) = Revolute('d', 0, 'a', L3, 'alpha', 0,  ...
    'I', IntertiaMatrix(M3,L3,R), ...
    'r', [0, 0.5, 0], ...
    'm', M3, ...
    'Jm',0.0001, ...
    'G', 500, ...
    'B', 0.0001, ...
    'Tc', 0.0001, ...
    'qlim', [-90 90]*deg );

RRR_rob = SerialLink(L, 'name', 'RobotUla');

clear L;

% home_position = [0, 0, -pi/2];
% hold_position = [0, 0, 0];
% 
% jacobian_home = RRR_rob.jacob0(home_position);
% G_home = RRR_rob.gravload(home_position);
% torque_home = jacobian_home.*G_home;
% 
% jacobian_hold = RRR_rob.jacob0(hold_position);
% G_hold = RRR_rob.gravload(hold_position);
% torque_hold = jacobian_hold.*G_hold;
% 
% 
% figure(1)
% 
% %RRR_rob.plot([0,pi/4,0])
% RRR_rob.teach(hold_position)


